"""
Django settings for finance project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import environ

from .constance_configs import *  # noqa

# Build paths inside the project like this: BASE_DIR / 'subdir'.
PROJECT_PACKAGE = Path(__file__).resolve(strict=True).parent.parent
BASE_DIR = PROJECT_PACKAGE.parent
DATA_DIR = BASE_DIR / "data"

env = environ.Env()

# reading .env file
env.read_env(os.path.join(BASE_DIR, "envfile"))

# Database url
DATABASE_URL = env.db_url("DATABASE_URL", default="")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY", default="")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)
DEBUG_TRACE = env.bool("DEBUG_TRACE", default=False)

ALLOWED_HOSTS = ["*"]

# Application definition
LOCAL_APPS = ["fundamentals", "taiex", "stock", "api_server", "company", "holiday"]
VENDOR_APPS = [
    "constance",
    "constance.backends.database",
    "django_extensions",
    "django_filters",
    "rest_framework",
    # Yet another swagger generator
    "drf_yasg",
    # add djoser for JWT
    "djoser",
]
DEFAULT_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_beat",
    "django_celery_results",
]

INSTALLED_APPS = DEFAULT_APPS + VENDOR_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.cache.UpdateCacheMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.cache.FetchFromCacheMiddleware",
]

ROOT_URLCONF = "finance.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "finance.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    "default": DATABASE_URL,
}

# Auto-created primary key used when not defining a primary key type
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Cache
# ref https://github.com/jazzband/django-redis
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env.str("REDIS_URL") + "/1",
        # "TIMEOUT": 600,
        "OPTIONS": {
            # "PICKLE_VERSION": -1,
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# Cache time to live
CACHE_MIDDLEWARE_SECONDS = 60 * 15

# setup log level
if DEBUG:
    if DEBUG_TRACE:
        LOG_LEVEL = "DEBUG"
    else:
        LOG_LEVEL = "INFO"
else:
    LOG_LEVEL = "WARNING"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {"format": "[{asctime}] {levelname} {message}", "style": "{"},
    },
    "filters": {
        "require_debug_true": {"()": "django.utils.log.RequireDebugTrue"},
        "require_debug_false": {"()": "django.utils.log.RequireDebugFalse"},
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "filters": ["require_debug_true"],
            "formatter": "simple",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "data/logs", "debug.log"),  # 日誌輸出檔案
            # "maxBytes":1024*1024*5, # 檔案大小
            # "backupCount": 5, # 備份份數
            "formatter": "simple",
        },
    },
    "loggers": {
        "": {"handlers": ["file", "console"], "level": LOG_LEVEL, "propagate": True}
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Constance
CONSTANCE_BACKEND = "constance.backends.database.DatabaseBackend"
CONSTANCE_IGNORE_ADMIN_VERSION_CHECK = True

# restful framework
REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

# JWT setting
# ref: https://github.com/SimpleJWT/django-rest-framework-simplejwt#settings
SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("Bearer",),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

# Swagger setting
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
            "description": "JWT authorization",
        }
    },
}

# Djoser setting
# ref: https://github.com/sunscrapers/djoser
DJOSER = {
    "TOKEN_MODEL": None,
    "PERMISSIONS": {"user_create": ["rest_framework.permissions.IsAdminUser"]},
}

# # Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Taipei"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(DATA_DIR, "static")
